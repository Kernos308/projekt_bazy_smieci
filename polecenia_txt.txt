CREATE TABLE archiwum_druzyna (
    druzyna_id SERIAL PRIMARY KEY,
    nazwa_druzyny VARCHAR(100),
    trener VARCHAR(50),
    rok_zalozenia DATE,
    data_usuniecia TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



DELIMITER //
CREATE TRIGGER usuniecie_danych_druzyna_trigger
BEFORE DELETE ON druzyna
FOR EACH ROW
BEGIN
    -- Przeniesienie rekordu do archiwum
    INSERT INTO archiwum_druzyna (druzyna_id, nazwa_druzyny, trener, rok_zalozenia, stadion)
    VALUES (OLD.druzyna_id, OLD.nazwa_druzyny, OLD.trener, OLD.rok_zalozenia, OLD.stadion);
END;
//
DELIMITER ;



CREATE TABLE archiwum_mecz (
    mecz_id SERIAL PRIMARY KEY,
    data_meczu DATE,
    druzyna_gospodarz_id INT,
    druzyna_gosc_id INT,
    wynik_gospodarz INT,
    wynik_gosc INT,
    data_usuniecia TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (druzyna_gospodarz_id) REFERENCES druzyna(druzyna_id),
    FOREIGN KEY (druzyna_gosc_id) REFERENCES druzyna(druzyna_id)
);



DELIMITER //
CREATE TRIGGER usuniecie_danych_mecz_trigger
BEFORE DELETE ON mecz
FOR EACH ROW
BEGIN
    -- Przeniesienie rekordu do archiwum
    INSERT INTO archiwum_mecz (`mecz_id`, `data_meczu`, `druzyna_gospodarz_id`, `druzyna_gosc_id`, `wynik_gospodarz`, `wynik_gosc`)
    VALUES (OLD.mecz_id, OLD.data_meczu, OLD.druzyna_gospodarz_id, OLD.druzyna_gosc_id, OLD.wynik_gospodarz, OLD.wynik_gosc);
END;
//
DELIMITER ;



CREATE TABLE archiwum_statystyki (
    statystyki_id SERIAL PRIMARY KEY,
    mecz_id INT,
    druzyna_id INT,
    posiadanie_pilki INT,
    podania INT,
    strzaly_celne INT,
    strzaly_niecelne INT,
    rzuty_rozne INT,
    rzuty_karne INT,
    faule INT,
    spalone INT,
    data_usuniecia TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (mecz_id) REFERENCES mecz(mecz_id),
    FOREIGN KEY (druzyna_id) REFERENCES druzyna(druzyna_id)
);

DELIMITER //
CREATE TRIGGER `usuniecie_danych_statystyki_trigger` 
BEFORE DELETE ON `statystyki` 
FOR EACH ROW BEGIN
-- Przeniesienie rekordu do archiwum
INSERT INTO archiwum_statystyki (`statystyki_id`, `mecz_id`, `druzyna_id`, `xg`, `podania`, `strzaly_celne`, `strzaly_niecelne`, `rzuty_karne`, `zolte_kartki`, `czerwone_kartki`) VALUES (OLD.statystyki_id, OLD.mecz_id, OLD.druzyna_id, OLD.xg, OLD.podania, OLD.strzaly_celne, OLD.strzaly_niecelne, OLD.rzuty_karne, OLD.zolte_kartki, OLD.czerwone_kartki);
END;
//
DELIMITER ;



CREATE TABLE archiwum_zawodnik (
    zawodnik_id SERIAL PRIMARY KEY,
    imie_nazwisko VARCHAR(50),
    data_urodzenia DATE,
    reprezentacja VARCHAR(50),
    pozycja VARCHAR(3),
    druzyna_id INT,
    data_usuniecia TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (druzyna_id) REFERENCES druzyna(druzyna_id)
);



DELIMITER //
CREATE TRIGGER usuniecie_danych_zawodnik_trigger
BEFORE DELETE ON zawodnik
FOR EACH ROW
BEGIN
    -- Przeniesienie rekordu do archiwum
    INSERT INTO archiwum_zawodnik
    VALUES (OLD.zawodnik_id, OLD.imie_nazwisko, OLD.data_urodzenia, OLD.reprezentacja, OLD.pozycja, OLD.`druzyna_id`);
END;
//
DELIMITER ;



CREATE TABLE `logi` (
  `id` int(11) NOT NULL,
  `user` varchar(255) DEFAULT NULL,
  `polecenie` varchar(255) DEFAULT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp()
)



DELIMITER //
CREATE TRIGGER logowanie_insert_zawodnik
AFTER INSERT ON zawodnik
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), CONCAT('INSERT INTO zawodnik
 	VALUES (', QUOTE(NEW.zawodnik_id), ', ', QUOTE(NEW.imie_nazwisko), ', ', QUOTE(NEW.data_urodzenia), ', ', QUOTE(NEW.reprezentacja),
	', ', QUOTE(NEW.pozycja), ', ', QUOTE(NEW.druzyna_id),
	', ...)', ')'));
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER logowanie_insert_druzyna
AFTER INSERT ON druzyna
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), CONCAT('INSERT INTO druzyna
 	VALUES (', QUOTE(NEW.druzyna_id), ', ', QUOTE(NEW.nazwa_druzyny), ', ', QUOTE(NEW.trener), ', ', QUOTE(NEW.rok_zalozenia),
	', ', QUOTE(NEW.stadion), 
	', ...)', ')'));
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER logowanie_insert_mecz
AFTER INSERT ON mecz
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), CONCAT('INSERT INTO mecz
 	VALUES (', QUOTE(NEW.mecz_id), ', ', QUOTE(NEW.data_meczu), ', ', QUOTE(NEW.`druzyna_gospodarz_id`), ', ', QUOTE(NEW.`druzyna_gosc_id`),
	', ', QUOTE(NEW.`wynik_gospodarz`), ', ', QUOTE(NEW.`wynik_gosc`),
	', ...)', ')'));
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER logowanie_insert_statystyki
AFTER INSERT ON statystyki
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), CONCAT('INSERT INTO statystyki
 	VALUES (', QUOTE(NEW.`statystyki_id`), ', ', QUOTE(NEW.`mecz_id`), ', ', QUOTE(NEW.`druzyna_id`), ', ', QUOTE(NEW.`posiadanie_pilki`),
	', ', QUOTE(NEW.`podania`), ', ', QUOTE(NEW.strzaly_celne), ', ', QUOTE(NEW.`strzaly_niecelne`), ', ', QUOTE(NEW.`rzuty_rozne`),
	', ', QUOTE(NEW.`rzuty_karne`), ', ', QUOTE(NEW.`faule`), ', ', QUOTE(NEW.`spalone`),
	', ...)', ')'));
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER logowanie_update_druzyna
AFTER INSERT ON druzyna
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), 'UPDATE druzyna');
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER logowanie_update_mecz
AFTER INSERT ON mecz
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), 'UPDATE mecz');
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER logowanie_update_statystyki
AFTER INSERT ON statystyki
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), 'UPDATE statystyki');
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER logowanie_update_zawodnik
AFTER INSERT ON zawodnik
FOR EACH ROW
BEGIN
    INSERT INTO logi (user, polecenie)
    VALUES (USER(), 'UPDATE zawodnik');
END;
//
DELIMITER ;
